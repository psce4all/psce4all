/**
* (c) 2015 psce4all project. All rights reserved.
* Released under GPL v2 license. Read LICENSE for more details.
*/

#pragma once

#define INSN_GPR_S                  0x00000001
#define INSN_GPR_T                  0x00000002
#define INSN_GPR_D                  0x00000004
#define INSN_GPR_RA                 0x00000008
#define INSN_FPR_S                  0x00000010
#define INSN_FPR_T                  0x00000020
#define INSN_FPR_D                  0x00000040
#define INSN_FPR_CC                 0x00000080
#define INSN_HI                     0x00000100
#define INSN_LO                     0x00000200
#define INSN_VPR_S                  0x00000400
#define INSN_VPR_T                  0x00000800
#define INSN_VPR_D                  0x00001000
#define INSN_VPR_CC                 0x00002000

#define INSN_UNCOND_BRANCH_DELAY    0x00000001
#define INSN_COND_BRANCH_DELAY      0x00000002
#define INSN_COND_BRANCH_LIKELY     0x00000004
#define INSN_NO_DELAY_SLOT          0x00000008

#define INSN_LOAD_MEMORY            0x00000010
#define INSN_STORE_MEMORY           0x00000020

#define INSN_ALLEGREX               0x00000000
#define INSN_SPECIAL                0x01000000
#define INSN_DEBUG                  0x02000000
#define INSN_COP0                   0x03000000
#define INSN_FPU                    0x04000000
#define INSN_VFPU                   0x05000000

#define INSN_ALIAS                  0x80000000

#define INSN_TYPE(flags)  ((flags) & 0x0F000000)


enum allegrex_insn_id
{
    I_INVALID,
    I_ADD,
    I_ADDI,
    I_ADDIU,
    I_ADDU,
    I_AND,
    I_ANDI,
    I_BEQ,
    I_BEQL,
    I_BGEZ,
    I_BGEZAL,
    I_BGEZALL,
    I_BGEZL,
    I_BGTZ,
    I_BGTZL,
    I_BITREV,
    I_BLEZ,
    I_BLEZL,
    I_BLTZ,
    I_BLTZL,
    I_BLTZAL,
    I_BLTZALL,
    I_BNE,
    I_BNEL,
    I_BREAK,
    I_CACHE,
    I_CFC0,
    I_CLO,
    I_CLZ,
    I_CTC0,
    I_MAX,
    I_MIN,
    I_DBREAK,
    I_DIV,
    I_DIVU,
    I_DRET,
    I_ERET,
    I_EXT,
    I_INS,
    I_J,
    I_JR,
    I_JALR,
    I_JAL,
    I_LB,
    I_LBU,
    I_LH,
    I_LHU,
    I_LL,
    I_LUI,
    I_LW,
    I_LWL,
    I_LWR,
    I_MADD,
    I_MADDU,
    I_MFC0,
    I_MFDR,
    I_MFHI,
    I_MFIC,
    I_MFLO,
    I_MOVN,
    I_MOVZ,
    I_MSUB,
    I_MSUBU,
    I_MTC0,
    I_MTDR,
    I_MTIC,
    I_HALT,
    I_MTHI,
    I_MTLO,
    I_MULT,
    I_MULTU,
    I_NOR,
    I_OR,
    I_ORI,
    I_ROTR,
    I_ROTV,
    I_SEB,
    I_SEH,
    I_SB,
    I_SC,
    I_SH,
    I_SLLV,
    I_SLL,
    I_SLT,
    I_SLTI,
    I_SLTIU,
    I_SLTU,
    I_SRA,
    I_SRAV,
    I_SRLV,
    I_SRL,
    I_SW,
    I_SWL,
    I_SWR,
    I_SUB,
    I_SUBU,
    I_SYNC,
    I_SYSCALL,
    I_XOR,
    I_XORI,
    I_WSBH,
    I_WSBW,
    I_ABS_S,
    I_ADD_S,
    I_BC1F,
    I_BC1FL,
    I_BC1T,
    I_BC1TL,
    I_C_F_S,
    I_C_UN_S,
    I_C_EQ_S,
    I_C_UEQ_S,
    I_C_OLT_S,
    I_C_ULT_S,
    I_C_OLE_S,
    I_C_ULE_S,
    I_C_SF_S,
    I_C_NGLE_S,
    I_C_SEQ_S,
    I_C_NGL_S,
    I_C_LT_S,
    I_C_NGE_S,
    I_C_LE_S,
    I_C_NGT_S,
    I_CEIL_W_S,
    I_CFC1,
    I_CTC1,
    I_CVT_S_W,
    I_CVT_W_S,
    I_DIV_S,
    I_FLOOR_W_S,
    I_LWC1,
    I_MFC1,
    I_MOV_S,
    I_MTC1,
    I_MUL_S,
    I_NEG_S,
    I_ROUND_W_S,
    I_SQRT_S,
    I_SUB_S,
    I_SWC1,
    I_TRUNC_W_S,
    I_BVF,
    I_BVFL,
    I_BVT,
    I_BVTL,
    I_LV_Q,
    I_LV_S,
    I_LVL_Q,
    I_LVR_Q,
    I_MFV,
    I_MFVC,
    I_MTV,
    I_MTVC,
    I_SV_Q,
    I_SV_S,
    I_SVL_Q,
    I_SVR_Q,
    I_VABS_P,
    I_VABS_Q,
    I_VABS_S,
    I_VABS_T,
    I_VADD_P,
    I_VADD_Q,
    I_VADD_S,
    I_VADD_T,
    I_VASIN_P,
    I_VASIN_Q,
    I_VASIN_S,
    I_VASIN_T,
    I_VAVG_P,
    I_VAVG_Q,
    I_VAVG_T,
    I_VBFY1_P,
    I_VBFY1_Q,
    I_VBFY2_Q,
    I_VCMOVF_P,
    I_VCMOVF_Q,
    I_VCMOVF_S,
    I_VCMOVF_T,
    I_VCMOVT_P,
    I_VCMOVT_Q,
    I_VCMOVT_S,
    I_VCMOVT_T,
    I_VCMP_P,
    I_VCMP_Q,
    I_VCMP_S,
    I_VCMP_T,
    I_VCOS_P,
    I_VCOS_Q,
    I_VCOS_S,
    I_VCOS_T,
    I_VCRS_T,
    I_VCRSP_T,
    I_VCST_P,
    I_VCST_Q,
    I_VCST_S,
    I_VCST_T,
    I_VDET_P,
    I_VDIV_P,
    I_VDIV_Q,
    I_VDIV_S,
    I_VDIV_T,
    I_VDOT_P,
    I_VDOT_Q,
    I_VDOT_T,
    I_VEXP2_P,
    I_VEXP2_Q,
    I_VEXP2_S,
    I_VEXP2_T,
    I_VF2H_P,
    I_VF2H_Q,
    I_VF2ID_P,
    I_VF2ID_Q,
    I_VF2ID_S,
    I_VF2ID_T,
    I_VF2IN_P,
    I_VF2IN_Q,
    I_VF2IN_S,
    I_VF2IN_T,
    I_VF2IU_P,
    I_VF2IU_Q,
    I_VF2IU_S,
    I_VF2IU_T,
    I_VF2IZ_P,
    I_VF2IZ_Q,
    I_VF2IZ_S,
    I_VF2IZ_T,
    I_VFAD_P,
    I_VFAD_Q,
    I_VFAD_T,
    I_VFIM_S,
    I_VFLUSH,
    I_VH2F_P,
    I_VH2F_S,
    I_VHDP_P,
    I_VHDP_Q,
    I_VHDP_T,
    I_VHTFM2_P,
    I_VHTFM3_T,
    I_VHTFM4_Q,
    I_VI2C_Q,
    I_VI2F_P,
    I_VI2F_Q,
    I_VI2F_S,
    I_VI2F_T,
    I_VI2S_P,
    I_VI2S_Q,
    I_VI2UC_Q,
    I_VI2US_P,
    I_VI2US_Q,
    I_VIDT_P,
    I_VIDT_Q,
    I_VIIM_S,
    I_VLGB_S,
    I_VLOG2_P,
    I_VLOG2_Q,
    I_VLOG2_S,
    I_VLOG2_T,
    I_VMAX_P,
    I_VMAX_Q,
    I_VMAX_S,
    I_VMAX_T,
    I_VMFVC,
    I_VMIDT_P,
    I_VMIDT_Q,
    I_VMIDT_T,
    I_VMIN_P,
    I_VMIN_Q,
    I_VMIN_S,
    I_VMIN_T,
    I_VMMOV_P,
    I_VMMOV_Q,
    I_VMMOV_T,
    I_VMMUL_P,
    I_VMMUL_Q,
    I_VMMUL_T,
    I_VMONE_P,
    I_VMONE_Q,
    I_VMONE_T,
    I_VMOV_P,
    I_VMOV_Q,
    I_VMOV_S,
    I_VMOV_T,
    I_VMSCL_P,
    I_VMSCL_Q,
    I_VMSCL_T,
    I_VMTVC,
    I_VMUL_P,
    I_VMUL_Q,
    I_VMUL_S,
    I_VMUL_T,
    I_VMZERO_P,
    I_VMZERO_Q,
    I_VMZERO_T,
    I_VNEG_P,
    I_VNEG_Q,
    I_VNEG_S,
    I_VNEG_T,
    I_VNOP,
    I_VNRCP_P,
    I_VNRCP_Q,
    I_VNRCP_S,
    I_VNRCP_T,
    I_VNSIN_P,
    I_VNSIN_Q,
    I_VNSIN_S,
    I_VNSIN_T,
    I_VOCP_P,
    I_VOCP_Q,
    I_VOCP_S,
    I_VOCP_T,
    I_VONE_P,
    I_VONE_Q,
    I_VONE_S,
    I_VONE_T,
    I_VPFXD,
    I_VPFXS,
    I_VPFXT,
    I_VQMUL_Q,
    I_VRCP_P,
    I_VRCP_Q,
    I_VRCP_S,
    I_VRCP_T,
    I_VREXP2_P,
    I_VREXP2_Q,
    I_VREXP2_S,
    I_VREXP2_T,
    I_VRNDF1_P,
    I_VRNDF1_Q,
    I_VRNDF1_S,
    I_VRNDF1_T,
    I_VRNDF2_P,
    I_VRNDF2_Q,
    I_VRNDF2_S,
    I_VRNDF2_T,
    I_VRNDI_P,
    I_VRNDI_Q,
    I_VRNDI_S,
    I_VRNDI_T,
    I_VRNDS_S,
    I_VROT_P,
    I_VROT_Q,
    I_VROT_T,
    I_VRSQ_P,
    I_VRSQ_Q,
    I_VRSQ_S,
    I_VRSQ_T,
    I_VS2I_P,
    I_VS2I_S,
    I_VSAT0_P,
    I_VSAT0_Q,
    I_VSAT0_S,
    I_VSAT0_T,
    I_VSAT1_P,
    I_VSAT1_Q,
    I_VSAT1_S,
    I_VSAT1_T,
    I_VSBN_S,
    I_VSBZ_S,
    I_VSCL_P,
    I_VSCL_Q,
    I_VSCL_T,
    I_VSCMP_P,
    I_VSCMP_Q,
    I_VSCMP_S,
    I_VSCMP_T,
    I_VSGE_P,
    I_VSGE_Q,
    I_VSGE_S,
    I_VSGE_T,
    I_VSGN_P,
    I_VSGN_Q,
    I_VSGN_S,
    I_VSGN_T,
    I_VSIN_P,
    I_VSIN_Q,
    I_VSIN_S,
    I_VSIN_T,
    I_VSLT_P,
    I_VSLT_Q,
    I_VSLT_S,
    I_VSLT_T,
    I_VSOCP_P,
    I_VSOCP_S,
    I_VSQRT_P,
    I_VSQRT_Q,
    I_VSQRT_S,
    I_VSQRT_T,
    I_VSRT1_Q,
    I_VSRT2_Q,
    I_VSRT3_Q,
    I_VSRT4_Q,
    I_VSUB_P,
    I_VSUB_Q,
    I_VSUB_S,
    I_VSUB_T,
    I_VSYNC,
    I_VT4444_Q,
    I_VT5551_Q,
    I_VT5650_Q,
    I_VTFM2_P,
    I_VTFM3_T,
    I_VTFM4_Q,
    I_VUS2I_P,
    I_VUS2I_S,
    I_VWB_Q,
    I_VWBN_S,
    I_VZERO_P,
    I_VZERO_Q,
    I_VZERO_S,
    I_VZERO_T,
    I_MFVME,
    I_MTVME
};

enum allegrex_reg
{
    R_INVALID = 0,

    R_DOMAIN_GPR = 1 << 24,

    R_GPR0 = R_DOMAIN_GPR, R_GPR1, R_GPR2, R_GPR3, R_GPR4, R_GPR5, R_GPR6, R_GPR7, R_GPR8, R_GPR9,
    R_GPR10, R_GPR11, R_GPR12, R_GPR13, R_GPR14, R_GPR15, R_GPR16, R_GPR17, R_GPR18, R_GPR19,
    R_GPR20, R_GPR21, R_GPR22, R_GPR23, R_GPR24, R_GPR25, R_GPR26, R_GPR27, R_GPR28, R_GPR29,
    R_GPR30, R_GPR31,

    R_DOMAIN_FPR = 2 << 24,

    R_FPR0 = R_DOMAIN_FPR, R_FPR1, R_FPR2, R_FPR3, R_FPR4, R_FPR5, R_FPR6, R_FPR7, R_FPR8, R_FPR9,
    R_FPR10, R_FPR11, R_FPR12, R_FPR13, R_FPR14, R_FPR15, R_FPR16, R_FPR17, R_FPR18, R_FPR19,
    R_FPR20, R_FPR21, R_FPR22, R_FPR23, R_FPR24, R_FPR25, R_FPR26, R_FPR27, R_FPR28, R_FPR29,
    R_FPR30, R_FPR31,

    R_DOMAIN_MDR = 3 << 24,

    R_LO = R_DOMAIN_MDR, R_HI, R_HILO = R_LO,

    R_DOMAIN_VPR = 4 << 24,

    R_VPR0 = R_DOMAIN_VPR, R_VPR1, R_VPR2, R_VPR3, R_VPR4, R_VPR5, R_VPR6, R_VPR7, R_VPR8, R_VPR9,
    R_VPR10, R_VPR11, R_VPR12, R_VPR13, R_VPR14, R_VPR15, R_VPR16, R_VPR17, R_VPR18, R_VPR19,
    R_VPR20, R_VPR21, R_VPR22, R_VPR23, R_VPR24, R_VPR25, R_VPR26, R_VPR27, R_VPR28, R_VPR29,
    R_VPR30, R_VPR31, R_VPR32, R_VPR33, R_VPR34, R_VPR35, R_VPR36, R_VPR37, R_VPR38, R_VPR39,
    R_VPR40, R_VPR41, R_VPR42, R_VPR43, R_VPR44, R_VPR45, R_VPR46, R_VPR47, R_VPR48, R_VPR49,
    R_VPR50, R_VPR51, R_VPR52, R_VPR53, R_VPR54, R_VPR55, R_VPR56, R_VPR57, R_VPR58, R_VPR59,
    R_VPR60, R_VPR61, R_VPR62, R_VPR63, R_VPR64, R_VPR65, R_VPR66, R_VPR67, R_VPR68, R_VPR69,
    R_VPR70, R_VPR71, R_VPR72, R_VPR73, R_VPR74, R_VPR75, R_VPR76, R_VPR77, R_VPR78, R_VPR79,
    R_VPR80, R_VPR81, R_VPR82, R_VPR83, R_VPR84, R_VPR85, R_VPR86, R_VPR87, R_VPR88, R_VPR89,
    R_VPR90, R_VPR91, R_VPR92, R_VPR93, R_VPR94, R_VPR95, R_VPR96, R_VPR97, R_VPR98, R_VPR99,
    R_VPR100, R_VPR101, R_VPR102, R_VPR103, R_VPR104, R_VPR105, R_VPR106, R_VPR107, R_VPR108, R_VPR109,
    R_VPR110, R_VPR111, R_VPR112, R_VPR113, R_VPR114, R_VPR115, R_VPR116, R_VPR117, R_VPR118, R_VPR119,
    R_VPR120, R_VPR121, R_VPR122, R_VPR123, R_VPR124, R_VPR125, R_VPR126, R_VPR127,

    R_DOMAIN_VPR_S = R_DOMAIN_VPR,
    R_DOMAIN_VPR_P = 5 << 24,
    R_DOMAIN_VPR_T = 6 << 24,
    R_DOMAIN_VPR_Q = 7 << 24,
    R_DOMAIN_VCR   = 8  << 24,
    R_DOMAIN_MPR_P = 9  << 24,
    R_DOMAIN_MPR_T = 10 << 24,
    R_DOMAIN_MPR_Q = 11 << 24,

    R_ENDING,

    R_DOMAIN_MASK = 0xFF000000,

    // alias registers
    R_ZERO = R_GPR0,
    R_AT   = R_GPR1,
    R_V0   = R_GPR2,
    R_V1   = R_GPR3,
    R_A0   = R_GPR4,
    R_A1   = R_GPR5,
    R_A2   = R_GPR6,
    R_A3   = R_GPR7,
    R_T0   = R_GPR8,  /* Allegrex uses it as A4 though */
    R_T1   = R_GPR9,  /* Allegrex uses it as A5 though */
    R_T2   = R_GPR10, /* Allegrex uses it as A6 though */
    R_T3   = R_GPR11, /* Allegrex uses it as A7 though */
    R_T4   = R_GPR12,
    R_T5   = R_GPR13,
    R_T6   = R_GPR14,
    R_T7   = R_GPR15,
    R_S0   = R_GPR16,
    R_S1   = R_GPR17,
    R_S2   = R_GPR18,
    R_S3   = R_GPR19,
    R_S4   = R_GPR20,
    R_S5   = R_GPR21,
    R_S6   = R_GPR22,
    R_S7   = R_GPR23,
    R_T8   = R_GPR24,
    R_T9   = R_GPR25,
    R_K0   = R_GPR26,
    R_K1   = R_GPR27,
    R_GP   = R_GPR28,
    R_SP   = R_GPR29,
    R_FP   = R_GPR30, R_S8 = R_GPR30,
    R_RA   = R_GPR31,

    R_S000_S = R_VPR0 | 0xFFFFFF00,
};

#define allegrex_get_reg_domain(id) (unsigned(id) >> 8)
#define allegrex_get_reg_index(id) (unsigned(id) & 255)

struct allegrex_instruction
{
    enum allegrex_insn_id insn;
    const char *name;
    unsigned int opcode;
    unsigned int mask;
    const char *fmt;
    unsigned int flags;
};

enum allegrex_operand_type
{
    O_NONE = 0,
    O_REG,
    O_IMM,
    O_FIMM,
    O_MEM
};

struct allegrex_operand_mem
{
    unsigned int base;
    unsigned long long disp;
};

struct allegrex_operand
{
    allegrex_operand_type type;
    union
    {
        unsigned int reg;
        unsigned long long imm;
        float fimm;
        allegrex_operand_mem mem;
    };
};

struct allegrex_opcode
{

};

extern const char *gpr_names[];

const struct allegrex_instruction *allegrex_decode_instruction(unsigned int opcode, int allowalias);
const struct allegrex_operand *allegrex_decode_operands(const allegrex_instruction *insn, unsigned int opcode, struct allegrex_operand operand[8]);
char *allegrex_disassemble_instruction(unsigned int opcode, unsigned int pc, int prtall);
char *allegrex_disassemble_instruction(const allegrex_instruction *insn, unsigned int opcode, unsigned int pc, int prtall);
